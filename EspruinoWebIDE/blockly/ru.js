// This file was automatically generated.  Do not modify.

'use strict';

if (window.location.href.indexOf("lang=ru")>=0) {

goog.provide('Blockly.Msg.ru');

goog.require('Blockly.Msg');

Blockly.Msg.ADD_COMMENT = "Добавить комментарий";
Blockly.Msg.AUTH = "Авторизуйте это приложение, чтобы иметь возможность сохранять свои результаты и делиться ими.";
Blockly.Msg.CHANGE_VALUE_TITLE = "Изменить значение:";
Blockly.Msg.CHAT = "В этом окне можно общаться с сотрудниками!";
Blockly.Msg.COLLAPSE_ALL = "Свернуть всё";
Blockly.Msg.COLLAPSE_BLOCK = "Свернуть блок";
Blockly.Msg.COLOUR_BLEND_COLOUR1 = "цвет 1";
Blockly.Msg.COLOUR_BLEND_COLOUR2 = "цвет 2";
Blockly.Msg.COLOUR_BLEND_HELPURL = "http://meyerweb.com/eric/tools/color-blend/";
Blockly.Msg.COLOUR_BLEND_RATIO = "ratio";
Blockly.Msg.COLOUR_BLEND_TITLE = "blend (смесь)";
Blockly.Msg.COLOUR_BLEND_TOOLTIP = "Смешивает два цвета в заданном отношении (0.0 - 1.0).";
Blockly.Msg.COLOUR_PICKER_HELPURL = "https://en.wikipedia.org/wiki/Color";
Blockly.Msg.COLOUR_PICKER_TOOLTIP = "Выберите цвет.";
Blockly.Msg.COLOUR_RANDOM_HELPURL = "http://randomcolour.com";
Blockly.Msg.COLOUR_RANDOM_TITLE = "random colour (случайный цвет)";
Blockly.Msg.COLOUR_RANDOM_TOOLTIP = "Взять случайный цвет.";
Blockly.Msg.COLOUR_RGB_BLUE = "blue (синий)";
Blockly.Msg.COLOUR_RGB_GREEN = "green (зелёный)";
Blockly.Msg.COLOUR_RGB_HELPURL = "http://www.december.com/html/spec/colorper.html";
Blockly.Msg.COLOUR_RGB_RED = "red (красный)";
Blockly.Msg.COLOUR_RGB_TITLE = "colour with (цвет по компонентам)";
Blockly.Msg.COLOUR_RGB_TOOLTIP = "Создать цвет по значениям красного, зеленого и  синего. Значения цветов должны лежать в диапазоне от 0 до 100.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_HELPURL = "https://code.google.com/p/blockly/wiki/Loops#Loop_Termination_Blocks";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "break out of loop(прервать цикл)";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "continue with next iteration of loop(перейти к следующей итерации цикла)";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Прервать цикл";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "Пропустить оставшиеся операции в теле цикла, перейти к следующей итерации";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "Внимание: этот блок можно использовать только внутри цикла!";
Blockly.Msg.CONTROLS_FOREACH_HELPURL = "https://code.google.com/p/blockly/wiki/Loops#for_each for each block";
Blockly.Msg.CONTROLS_FOREACH_INPUT_INLIST = "in list(в списке)";
Blockly.Msg.CONTROLS_FOREACH_INPUT_INLIST_TAIL = "";
Blockly.Msg.CONTROLS_FOREACH_INPUT_ITEM = "for each item(для каждого)";
Blockly.Msg.CONTROLS_FOREACH_TOOLTIP = "Пройти во всем элементам списка, устанавливая переменную '%1' в значение элемента и выполнить операторы с таким значением переменной.";
Blockly.Msg.CONTROLS_FOR_HELPURL = "https://code.google.com/p/blockly/wiki/Loops#count_with";
Blockly.Msg.CONTROLS_FOR_INPUT_FROM_TO_BY = "from %1 to %2 by %3(От __ до __ по __)";
Blockly.Msg.CONTROLS_FOR_INPUT_WITH = "count with (счетчик)";
Blockly.Msg.CONTROLS_FOR_TOOLTIP = "Заставить переменную %1 принимать значения от начального до конечного с определённым шагом и выполнить операторы с таким значением переменной.";
Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "Добавить условие к условному оператору.";
Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = "Добавить завершающее если-ничего-не-подошло условие к условному оператору.";
Blockly.Msg.CONTROLS_IF_HELPURL = "https://code.google.com/p/blockly/wiki/If_Then";
Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = "Добавить, удалить или переупорядочить части условного оператора.";
Blockly.Msg.CONTROLS_IF_MSG_ELSE = "else(иначе)";
Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = "else if(иначе если)";
Blockly.Msg.CONTROLS_IF_MSG_IF = "if(если)";
Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = "Если УСЛОВИЕ верно, выполнить блок операторов.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = "Если УСЛОВИЕ верно, выполнить первый блок операторов, иначе - выполнить второй.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = "Если УСЛОВИЕ верно, выполнить первый блок операторов, иначе, если верно ВТОРОЕ УСЛОВЕ - выполнить второй.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = "Если УСЛОВИЕ верно, выполнить первый блок операторов, иначе, если верно ВТОРОЕ УСЛОВЕ - выполнить второй. Если ни одно из них не верно, выполнить последний блок операторов.";
Blockly.Msg.CONTROLS_REPEAT_HELPURL = "https://en.wikipedia.org/wiki/For_loop";
Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = "do(выполнять)";
Blockly.Msg.CONTROLS_REPEAT_TITLE = "repeat %1 times(повторить __ раз)";
Blockly.Msg.CONTROLS_REPEAT_TITLE_REPEAT = "repeat (повторять)";
Blockly.Msg.CONTROLS_REPEAT_TITLE_TIMES = "times (раз)";
Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = "Выполнять операторы несколько раз.";
Blockly.Msg.CONTROLS_WHILEUNTIL_HELPURL = "https://code.google.com/p/blockly/wiki/Loops#repeat";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "repeat until (повторять, пока ложно)";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "repeat while (повторять, пока истинно)";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "Пока УСЛОВИЕ ложно, выполнять блок операторов.";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "Пока УСЛОВИЕ истинно, выполнять блок операторов.";
Blockly.Msg.DELETE_BLOCK = "Удалить блок";
Blockly.Msg.DELETE_X_BLOCKS = "Удалить %1 блоков";
Blockly.Msg.DISABLE_BLOCK = "Выключить блок";
Blockly.Msg.DUPLICATE_BLOCK = "Дублировать";
Blockly.Msg.ENABLE_BLOCK = "Включить блок";
Blockly.Msg.EXPAND_ALL = "Развернуть блоки";
Blockly.Msg.EXPAND_BLOCK = "Развернуть блок";
Blockly.Msg.EXTERNAL_INPUTS = "Внешние вводы";
Blockly.Msg.HELP = "Помощь";
Blockly.Msg.INLINE_INPUTS = "Inline Inputs";
Blockly.Msg.LISTS_CREATE_EMPTY_HELPURL = "https://en.wikipedia.org/wiki/Linked_list#Empty_lists";
Blockly.Msg.LISTS_CREATE_EMPTY_TITLE = "create empty list(создать пустой список)";
Blockly.Msg.LISTS_CREATE_EMPTY_TOOLTIP = "Возвращает список длины 0, не содержащий элементов";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "list";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Добавить, удалить или переупорядочить элементы списка.";
Blockly.Msg.LISTS_CREATE_WITH_INPUT_WITH = "create list with(создать список с)";
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = "Добавить элемент в список";
Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP = "Создать список с любым количеством элементов.";
Blockly.Msg.LISTS_GET_INDEX_FIRST = "first(первый)";
Blockly.Msg.LISTS_GET_INDEX_FROM_END = "# from end(с конца)";
Blockly.Msg.LISTS_GET_INDEX_FROM_START = "#";
Blockly.Msg.LISTS_GET_INDEX_GET = "get(взять)";
Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE = "get and remove(изъять)";
Blockly.Msg.LISTS_GET_INDEX_LAST = "last(последний)";
Blockly.Msg.LISTS_GET_INDEX_RANDOM = "random(случайный)";
Blockly.Msg.LISTS_GET_INDEX_REMOVE = "remove(удалить)";
Blockly.Msg.LISTS_GET_INDEX_TAIL = "";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "Возвращает первый элемент списка.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_END = "Возвращает элемент списка по номеру, начиная с конца.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_START = "Возвращает элемент списка по номеру с начала списка.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "Возвращает последний элемент списка.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "Возвращает случайный элемент списка.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Изымает первый элемент из списка.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_END = "Изымает элемент из списка по номеру, начиная с конца.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_START = "Изымает элемент из списка по номеру, начиная с начала.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Изымает последний элемент списка.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Изымает случайный элемент списка.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "Удаляет первый элемент списка.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_END = "Удаляет элемент из списка по номеру, начиная с конца.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_START = "Удаляет элемент из списка по номеру, начиная с начала.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Удаляет последний элемент списка.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Удаляет случайный элемент списка.";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END = "to # from end (до # с конца)";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START = "to # (до #)";
Blockly.Msg.LISTS_GET_SUBLIST_END_LAST = "to last (к последнему)";
Blockly.Msg.LISTS_GET_SUBLIST_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#Getting_a_sublist";
Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST = "get sub-list from first (взять часть списка)";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END = "get sub-list from # from end (номер начала части с конца)";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START = "get sub-list from # (номер начала части с начала)";
Blockly.Msg.LISTS_GET_SUBLIST_TAIL = "";
Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP = "Создает копию заданной части списка.";
Blockly.Msg.LISTS_INDEX_OF_FIRST = "find first occurrence of item (найти перавое вхождение элемента)";
Blockly.Msg.LISTS_INDEX_OF_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#Getting_Items_from_a_List";
Blockly.Msg.LISTS_INDEX_OF_LAST = "find last occurrence of item (найти последнее вхождение элемента)";
Blockly.Msg.LISTS_INDEX_OF_TOOLTIP = "Возвращает номер первого/последнего вхождения элемента в список. Возвращает 0, если элемент не найден.";
Blockly.Msg.LISTS_INLIST = "in list (в списке)";
Blockly.Msg.LISTS_IS_EMPTY_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#is_empty";
Blockly.Msg.LISTS_IS_EMPTY_TITLE = "%1 is empty (__ пуст)";
Blockly.Msg.LISTS_LENGTH_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#length_of";
Blockly.Msg.LISTS_LENGTH_TITLE = "length of %1 (длина __)";
Blockly.Msg.LISTS_LENGTH_TOOLTIP = "Возвращает длину списка";
Blockly.Msg.LISTS_REPEAT_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#create_list_with";
Blockly.Msg.LISTS_REPEAT_TITLE = "create list with item %1 repeated %2 times (создать список, повторив __ __ раз)";
Blockly.Msg.LISTS_REPEAT_TOOLTIP = "Создать список, повторив значение указанное число раз.";
Blockly.Msg.LISTS_SET_INDEX_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#in_list_..._set";
Blockly.Msg.LISTS_SET_INDEX_INPUT_TO = "as (как)";
Blockly.Msg.LISTS_SET_INDEX_INSERT = "insert at (вставить)";
Blockly.Msg.LISTS_SET_INDEX_SET = "set (установить)";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Вставить в начало списка.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_END = "Вставить в указанной позиции, начиная с конца.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_START = "Вставить в указанной позиции, начиная с начала.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "Вставить в конец списка.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Вставить в случайную точку списка.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Установить значение первого элемента.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_END = "Установить значение в указанной позиции, начиная с конца.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_START = "Установить значение в указанной позиции, начиная с начала.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Установить значение последнего элемента.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Установить значение случайного элемента списка.";
Blockly.Msg.LISTS_TOOLTIP = "Истинно, если список пуст.";
Blockly.Msg.LOGIC_BOOLEAN_FALSE = "false (ложь)";
Blockly.Msg.LOGIC_BOOLEAN_HELPURL = "https://code.google.com/p/blockly/wiki/True_False";
Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP = "Возвращает истину или ложь.";
Blockly.Msg.LOGIC_BOOLEAN_TRUE = "true (истина)";
Blockly.Msg.LOGIC_COMPARE_HELPURL = "https://en.wikipedia.org/wiki/Inequality_(mathematics)";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ = "Истинно, если значения равны.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT = "Истинно, если первое значение больше второго.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE = "Истинно, если первое значение больше или равно второго.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT = "Истинно, если первое значение меньше второго.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE = "Истинно, если первое значение меньше или равно второго.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = "Истинно, если значения не равны.";
Blockly.Msg.LOGIC_NEGATE_HELPURL = "https://en.wikipedia.org/wiki/Negation";
Blockly.Msg.LOGIC_NEGATE_TITLE = "not %1 (не __)";
Blockly.Msg.LOGIC_NEGATE_TOOLTIP = "Возвращает истинну, если значение ложно и наоборот.";
Blockly.Msg.LOGIC_NULL = "null";
Blockly.Msg.LOGIC_NULL_HELPURL = "https://en.wikipedia.org/wiki/Nullable_type";
Blockly.Msg.LOGIC_NULL_TOOLTIP = "Возвращает null.";
Blockly.Msg.LOGIC_OPERATION_AND = "and (и)";
Blockly.Msg.LOGIC_OPERATION_HELPURL = "https://code.google.com/p/blockly/wiki/And_Or";
Blockly.Msg.LOGIC_OPERATION_OR = "or (или)";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND = "Возвращает истинну, только если оба аргумента истинны.";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR = "Возвращает истинну, если хотя бы один аргумент истинен..";
Blockly.Msg.LOGIC_TERNARY_CONDITION = "test (проверка)";
Blockly.Msg.LOGIC_TERNARY_HELPURL = "https://ru.wikipedia.org/wiki/%D0%A2%D0%B5%D1%80%D0%BD%D0%B0%D1%80%D0%BD%D0%B0%D1%8F_%D1%83%D1%81%D0%BB%D0%BE%D0%B2%D0%BD%D0%B0%D1%8F_%D0%BE%D0%BF%D0%B5%D1%80%D0%B0%D1%86%D0%B8%D1%8F";
Blockly.Msg.LOGIC_TERNARY_IF_FALSE = "if false (если ложно)";
Blockly.Msg.LOGIC_TERNARY_IF_TRUE = "if true (если истинно)";
Blockly.Msg.LOGIC_TERNARY_TOOLTIP = "Проверить условие 'test'. Если оно истинно, вернуть одно значение (if true), иначе - второе(if false).";
Blockly.Msg.MATH_ADDITION_SYMBOL = "+";
Blockly.Msg.MATH_ARITHMETIC_HELPURL = "https://en.wikipedia.org/wiki/Arithmetic";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = "Возвращает сумму аргументов.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "Возвращает отношение аргументов.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = "Возвращает разность аргументов.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "Возвращает произведение аргументов.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = "Возвращает первый аргумент в степени второго.";
Blockly.Msg.MATH_CHANGE_HELPURL = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
Blockly.Msg.MATH_CHANGE_INPUT_BY = "by(на)";
Blockly.Msg.MATH_CHANGE_TITLE_CHANGE = "change(увеличить)";
Blockly.Msg.MATH_CHANGE_TOOLTIP = "Увеличивает значение переменной '%1' на.";
Blockly.Msg.MATH_CONSTANT_HELPURL = "https://en.wikipedia.org/wiki/Mathematical_constant";
Blockly.Msg.MATH_CONSTANT_TOOLTIP = "Возвращает значения констант: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), or ∞ (infinity).";
Blockly.Msg.MATH_CONSTRAIN_HELPURL = "https://en.wikipedia.org/wiki/Clamping_%28graphics%29";
Blockly.Msg.MATH_CONSTRAIN_TITLE = "constrain %1 low %2 high %3(уместить __ от __ до __)";
Blockly.Msg.MATH_CONSTRAIN_TOOLTIP = "Уместить значение в диапазоне (включая границы).";
Blockly.Msg.MATH_DIVISION_SYMBOL = "÷";
Blockly.Msg.MATH_IS_DIVISIBLE_BY = "is divisible by(делится на)";
Blockly.Msg.MATH_IS_EVEN = "is even(четное)";
Blockly.Msg.MATH_IS_NEGATIVE = "is negative(меньше нуля)";
Blockly.Msg.MATH_IS_ODD = "is odd(нечетное)";
Blockly.Msg.MATH_IS_POSITIVE = "is positive(больше нуля)";
Blockly.Msg.MATH_IS_PRIME = "is prime(простое)";
Blockly.Msg.MATH_IS_TOOLTIP = "Проверяет четность, делимость, знак или простоту аргумента. Возвращает истинну или ложь.";
Blockly.Msg.MATH_IS_WHOLE = "is whole(целое)";
Blockly.Msg.MATH_MODULO_HELPURL = "https://en.wikipedia.org/wiki/Modulo_operation";
Blockly.Msg.MATH_MODULO_TITLE = "remainder of %1 ÷ %2 (остаток от деления __ на __)";
Blockly.Msg.MATH_MODULO_TOOLTIP = "Возвращает остаток от деления двух чисел.";
Blockly.Msg.MATH_MULTIPLICATION_SYMBOL = "×";
Blockly.Msg.MATH_NUMBER_HELPURL = "https://en.wikipedia.org/wiki/Number";
Blockly.Msg.MATH_NUMBER_TOOLTIP = "Число.";
Blockly.Msg.MATH_ONLIST_HELPURL = "";
Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE = "average of list (среднее из списка)";
Blockly.Msg.MATH_ONLIST_OPERATOR_MAX = "max of list (максимум из списка)";
Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN = "median of list (медиана из списка)";
Blockly.Msg.MATH_ONLIST_OPERATOR_MIN = "min of list (минимум из списка)";
Blockly.Msg.MATH_ONLIST_OPERATOR_MODE = "modes of list (самый частый) ";
Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM = "random item of list (cлучайный элемент)";
Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV = "standard deviation of list (стандартное отклонение)";
Blockly.Msg.MATH_ONLIST_OPERATOR_SUM = "sum of list (сумма)";
Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = "Возвращает среднее арифметическое элементов списка.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX = "Возвращает максимальное значение из списка.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = "Возвращает медианное значение из списка.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN = "Возвращает минимальное значение из списка.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE = "Возвращает наиболее часто встречающееся значение из списка.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM = "Возвращает случайный элемент списка.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = "Возвращает стандартное отклонение элементов списка.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM = "Возвращает сумму элементов списка.";
Blockly.Msg.MATH_POWER_SYMBOL = "^";
Blockly.Msg.MATH_RANDOM_FLOAT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = "random fraction (случайная дробь)";
Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP = "Возвращает случайную дробь от 0.0 (включая) до 1.0 (не включая).";
Blockly.Msg.MATH_RANDOM_INT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_INT_TITLE = "random integer from %1 to %2 (случайное число)";
Blockly.Msg.MATH_RANDOM_INT_TOOLTIP = "Возвращает случайное целое число в заданном диапазоне, включая его границы.";
Blockly.Msg.MATH_ROUND_HELPURL = "https://en.wikipedia.org/wiki/Rounding";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUND = "round (округлить)";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDDOWN = "round down (округлить вниз)";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDUP = "round up (округлить вверх)";
Blockly.Msg.MATH_ROUND_TOOLTIP = "Округлить число к ближайшему целому, вверх или вниз.";
Blockly.Msg.MATH_SINGLE_HELPURL = "https://en.wikipedia.org/wiki/Square_root";
Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE = "absolute (модуль)";
Blockly.Msg.MATH_SINGLE_OP_ROOT = "square root (корень)";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS = "Возвращает модуль аргумента.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP = "Возвращает e в степени аргумента.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LN = "Возвращает натуральный логарифм аргумента.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10 = "Возвращает десятичный логарифм аргумента.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG = "Возвращает аргумент с обратным знаком";
Blockly.Msg.MATH_SINGLE_TOOLTIP_POW10 = "Возвращает 10 в степени аргумента.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT = "Возвращает квадратный корень числа.";
Blockly.Msg.MATH_SUBTRACTION_SYMBOL = "-";
Blockly.Msg.MATH_TRIG_ACOS = "acos";
Blockly.Msg.MATH_TRIG_ASIN = "asin";
Blockly.Msg.MATH_TRIG_ATAN = "atan";
Blockly.Msg.MATH_TRIG_COS = "cos";
Blockly.Msg.MATH_TRIG_HELPURL = "https://en.wikipedia.org/wiki/Trigonometric_functions";
Blockly.Msg.MATH_TRIG_SIN = "sin";
Blockly.Msg.MATH_TRIG_TAN = "tan";
Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS = "Возвращает арккосинус аргумента.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN = "Возвращает арксинус аргумента.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN = "Возвращает арктангенс аргумента.";
Blockly.Msg.MATH_TRIG_TOOLTIP_COS = "Возвращает косинус угла, заданного в градусах (не в радианах!).";
Blockly.Msg.MATH_TRIG_TOOLTIP_SIN = "Возвращает синус угла, заданного в градусах (не в радианах!).";
Blockly.Msg.MATH_TRIG_TOOLTIP_TAN = "Возвращает тангенс угла, заданного в градусах (не в радианах!).";
Blockly.Msg.ME = "Me";
Blockly.Msg.NEW_VARIABLE = "New variable (Новая переменная)...";
Blockly.Msg.NEW_VARIABLE_TITLE = "New variable name (Имя новой переменной):";
Blockly.Msg.ORDINAL_NUMBER_SUFFIX = "";
Blockly.Msg.PROCEDURES_ALLOW_STATEMENTS = "allow statements(разрешить выражения)";
Blockly.Msg.PROCEDURES_BEFORE_PARAMS = "with(с):";
Blockly.Msg.PROCEDURES_CALLNORETURN_CALL = "";
Blockly.Msg.PROCEDURES_CALLNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP = "Выполнить пользовательскую функцию '%1'.";
Blockly.Msg.PROCEDURES_CALLRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP = "Выполнить пользовательскую функцию '%1' и использовать её результат.";
Blockly.Msg.PROCEDURES_CALL_BEFORE_PARAMS = "with(с):";
Blockly.Msg.PROCEDURES_CREATE_DO = "Create '%1' (создать '%1')";
Blockly.Msg.PROCEDURES_DEFNORETURN_DO = "";
Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = "do something (сделать нечто)";
Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE = "to (чтобы)";
Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = "Создает функцию без возвращаемого значения.";
Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_DEFRETURN_RETURN = "return (вернуть)";
Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP = "Создать функцию с возвращаемым значением.";
Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = "Внимание: у функции есть повторяющиеся параметры.";
Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF = "Подсветить определение функции";
Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP = "Если первое верно, вернуть второе значение.";
Blockly.Msg.PROCEDURES_IFRETURN_WARNING = "Внимание: этот блок может быть использован только внутри определения функции.";
Blockly.Msg.PROCEDURES_MUTATORARG_TITLE = "название аргумента:";
Blockly.Msg.PROCEDURES_MUTATORARG_TOOLTIP = "Название аргумента функции.";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = "аргументы";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "Добавить, удалить или переупорядочить аргументы функции.";
Blockly.Msg.REMOVE_COMMENT = "Удалить комментарий";
Blockly.Msg.RENAME_VARIABLE = "Переименовать переменную...";
Blockly.Msg.RENAME_VARIABLE_TITLE = "Переименовать все '%1' переменные в:";
Blockly.Msg.TEXT_APPEND_APPENDTEXT = "append text(добавить текст)";
Blockly.Msg.TEXT_APPEND_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Text_modification";
Blockly.Msg.TEXT_APPEND_TO = "to(к)";
Blockly.Msg.TEXT_APPEND_TOOLTIP = "Добавить текст к переменной '%1'.";
Blockly.Msg.TEXT_CHANGECASE_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Adjusting_text_case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "to lower case(в нижний регистр)";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = "to Title Case(в Титульный Регистр)";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "to UPPER CASE(в ВЕРХНИЙ РЕГИСТР)";
Blockly.Msg.TEXT_CHANGECASE_TOOLTIP = "Вернуть копию текста в другом регистре.";
Blockly.Msg.TEXT_CHARAT_FIRST = "get first letter(первая буква)";
Blockly.Msg.TEXT_CHARAT_FROM_END = "get letter # from end(#-ая буква с конца)";
Blockly.Msg.TEXT_CHARAT_FROM_START = "get letter #(#-ая буква с начала)";
Blockly.Msg.TEXT_CHARAT_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Extracting_text";
Blockly.Msg.TEXT_CHARAT_INPUT_INTEXT = "in text(в тексте)";
Blockly.Msg.TEXT_CHARAT_LAST = "get last letter(последняя буква)";
Blockly.Msg.TEXT_CHARAT_RANDOM = "get random letter(случайная буква)";
Blockly.Msg.TEXT_CHARAT_TAIL = "";
Blockly.Msg.TEXT_CHARAT_TOOLTIP = "Возвращает букву в указанной позиции.";
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "добавить текст.";
Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "join(объединить)";
Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = "Добавить, удалить или переупорядочить секции в текстовом блоке.";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END = "to letter # from end (до буквы # с конца) ";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START = "to letter # (до буквы #)";
Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST = "to last letter (до последней буквы)";
Blockly.Msg.TEXT_GET_SUBSTRING_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Extracting_a_region_of_text";
Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "in text (в тексте)";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST = "get substring from first letter (взять подстроку от первой буквы)";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END = "get substring from letter # from end (взять подстроку от буквы # с начала)";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START = "get substring from letter # (взять подстроку от буквы #)";
Blockly.Msg.TEXT_GET_SUBSTRING_TAIL = "";
Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP = "Возвращает подстроку.";
Blockly.Msg.TEXT_INDEXOF_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Finding_text";
Blockly.Msg.TEXT_INDEXOF_INPUT_INTEXT = "in text (в тексте)";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST = "find first occurrence of text (найти первое вхождение подстроки)";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST = "find last occurrence of text (найти последнее вхождение подстроки)";
Blockly.Msg.TEXT_INDEXOF_TAIL = "";
Blockly.Msg.TEXT_INDEXOF_TOOLTIP = "Возвращает первое/последнее вхождение подстроки в тексте. Возвращает 0, если не найдено.";
Blockly.Msg.TEXT_ISEMPTY_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Checking_for_empty_text";
Blockly.Msg.TEXT_ISEMPTY_TITLE = "%1 is empty (пуста)";
Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = "Возвращает истину, если аргумент - пустая строка.";
Blockly.Msg.TEXT_JOIN_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Text_creation";
Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = "create text with (создать текст)";
Blockly.Msg.TEXT_JOIN_TOOLTIP = "Создать текст, объединив произвольное количество элементов.";
Blockly.Msg.TEXT_LENGTH_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Text_modification";
Blockly.Msg.TEXT_LENGTH_TITLE = "length of %1 (длина)";
Blockly.Msg.TEXT_LENGTH_TOOLTIP = "Возвращает длину текста в буквах (включая пробелы).";
Blockly.Msg.TEXT_PRINT_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Printing_text";
Blockly.Msg.TEXT_PRINT_TITLE = "print %1 (вывести)";
Blockly.Msg.TEXT_PRINT_TOOLTIP = "Выводит текст, число или значение.";
Blockly.Msg.TEXT_PROMPT_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Getting_input_from_the_user";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = "Дождаться ввода числа от пользователя.";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT = "Дождаться ввода текста от пользователя.";
Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER = "prompt for number with message (сообщение для пользователя)";
Blockly.Msg.TEXT_PROMPT_TYPE_TEXT = "prompt for text with message (сообщение для пользователя)";
Blockly.Msg.TEXT_TEXT_HELPURL = "https://en.wikipedia.org/wiki/String_(computer_science)";
Blockly.Msg.TEXT_TEXT_TOOLTIP = "Буква, слово или кусочек текста.";
Blockly.Msg.TEXT_TRIM_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Trimming_%28removing%29_spaces";
Blockly.Msg.TEXT_TRIM_OPERATOR_BOTH = "trim spaces from both sides of (убрать пробелы с обеих сторон)";
Blockly.Msg.TEXT_TRIM_OPERATOR_LEFT = "trim spaces from left side of (убрать пробелы в начале)";
Blockly.Msg.TEXT_TRIM_OPERATOR_RIGHT = "trim spaces from right side of (убрать пробелы в конце)";
Blockly.Msg.TEXT_TRIM_TOOLTIP = "Вернуть копию текста без пробелов в начале, конце или с обеих сторон.";
Blockly.Msg.VARIABLES_DEFAULT_NAME = "item";
Blockly.Msg.VARIABLES_GET_CREATE_SET = "Create 'set %1'";
Blockly.Msg.VARIABLES_GET_HELPURL = "https://code.google.com/p/blockly/wiki/Variables#Get";
Blockly.Msg.VARIABLES_GET_TAIL = "";
Blockly.Msg.VARIABLES_GET_TITLE = "";
Blockly.Msg.VARIABLES_GET_TOOLTIP = "Возвращает значение переменной.";
Blockly.Msg.VARIABLES_SET_CREATE_GET = "Create 'get %1'";
Blockly.Msg.VARIABLES_SET_HELPURL = "https://code.google.com/p/blockly/wiki/Variables#Set";
Blockly.Msg.VARIABLES_SET_TAIL = "to (в)";
Blockly.Msg.VARIABLES_SET_TITLE = "set (установить)";
Blockly.Msg.VARIABLES_SET_TOOLTIP = "Устанавливает значение переменной.";
Blockly.Msg.PROCEDURES_DEFRETURN_TITLE = Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE;
Blockly.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.LISTS_SET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_DEFRETURN_PROCEDURE = Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;
Blockly.Msg.VARIABLES_SET_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TITLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.MATH_CHANGE_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.VARIABLES_GET_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.PROCEDURES_DEFRETURN_DO = Blockly.Msg.PROCEDURES_DEFNORETURN_DO;
Blockly.Msg.LISTS_GET_INDEX_HELPURL = Blockly.Msg.LISTS_INDEX_OF_HELPURL;
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.CONTROLS_IF_MSG_THEN = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_INDEX_OF_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_CALLRETURN_CALL = Blockly.Msg.PROCEDURES_CALLNORETURN_CALL;
Blockly.Msg.LISTS_GET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.CONTROLS_FOR_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_FOREACH_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_IF_TITLE_IF = Blockly.Msg.CONTROLS_IF_MSG_IF;
Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = Blockly.Msg.CONTROLS_IF_MSG_ELSEIF;
Blockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE = Blockly.Msg.CONTROLS_IF_MSG_ELSE;



Blockly.Msg.ESPRUINO_WAIT = 'wait (ждать)';
Blockly.Msg.ESPRUINO_SECONDS = 'seconds (секунд)';
Blockly.Msg.ESPRUINO_WAIT_TOOLTIP = 'Подождать указанное число секунд';
Blockly.Msg.ESPRUINO_AFTER = 'after (через)';
Blockly.Msg.ESPRUINO_AFTER_TOOLTIP = 'Запустить код через указанное число секунд';

Blockly.Msg.ESPRUINO_EVERY = 'every (каждые)';
Blockly.Msg.ESPRUINO_EVERY_TOOLTIP = 'Повторять запуск кода с указанным интервалом';

Blockly.Msg.ESPRUINO_MORE = 'Ещё';
Blockly.Msg.ESPRUINO_BACK = 'Назад';
Blockly.Msg.ESPRUINO_PIN_NAME = 'Название Пина';

Blockly.Msg.ESPRUINO_WATCH = 'watch (отследить)';
Blockly.Msg.ESPRUINO_WATCH_TOOLTIP = 'Запустить код при изменении на входе';
Blockly.Msg.ESPRUINO_TIME = 'Time (время)';
Blockly.Msg.ESPRUINO_TIME_TOOLTIP = 'Читает текущее время в секундах';
Blockly.Msg.ESPRUINO_DIGITALWRITE = 'digitalWrite Pin (записать число в Пин)';
Blockly.Msg.ESPRUINO_VALUE = 'Value (значение)';
Blockly.Msg.ESPRUINO_DIGITALWRITE_TOOLTIP = 'Записывает дискретное значение в Пин';
Blockly.Msg.ESPRUINO_DIGITALPULSE = 'digitalPulse Pin (пульсировать)';
Blockly.Msg.ESPRUINO_MILLISECONDS = 'Milliseconds (Миллисекунд)';
Blockly.Msg.ESPRUINO_DIGITALPULSE_TOOLTIP = 'Отправляет импульсы в Пин с указанным интервалом в миллисекундах';
Blockly.Msg.ESPRUINO_DIGITALREAD = 'digitalRead Pin (прочитать число из Пина)';
Blockly.Msg.ESPRUINO_DIGITALREAD_TOOLTIP = 'Прочитать дискретное значение из Пина';
Blockly.Msg.ESPRUINO_ANALOGWRITE = 'analogWrite Pin (записать аналог)';
Blockly.Msg.ESPRUINO_ANALOGWRITE_TOOLTIP = 'Записать аналоговое значение в Пин';
Blockly.Msg.ESPRUINO_ANALOGREAD = 'analogRead Pin (прочитать аналог) ';
Blockly.Msg.ESPRUINO_ANALOGREAD_TOOLTIP = 'Прочитать аналоговое значение из Пина';
Blockly.Msg.ESPRUINO_PINMODE = 'pinMode Pin';
Blockly.Msg.ESPRUINO_PINMODE_TOOLTIP = 'Sets the mode of the pin (if not used, pin mode is set automatically)';
Blockly.Msg.ESPRUINO_JS_TOOLTIP = 'Запустить кусочек JavaScript';
Blockly.Msg.ESPRUINO_JSEXPR_TOOLTIP = 'Запустить кусочек JavaScript';
Blockly.Msg.ESPRUINO_MOVE_SERVO = 'Move Servo on Pin (Переместить серво на пине)';
Blockly.Msg.ESPRUINO_TO = 'to (в)';
Blockly.Msg.ESPRUINO_MOVE_SERVO_TOOLTIP = 'Запустить серво привод на пине в позицию между -1 и 1';
Blockly.Msg.ESPRUINO_STOP_SERVO = 'Stop Servo on Pin (остановить серво)';
Blockly.Msg.ESPRUINO_STOP_SERVO_TOOLTIP = 'Остановить серво привод';
Blockly.Msg.ESPRUINO_ULTRASONIC_GET_TRIG = 'Get distance (измерить расстояние), trigger (излучатель) ';
Blockly.Msg.ESPRUINO_ULTRASONIC_ECHO = ', echo (приемник)';
Blockly.Msg.ESPRUINO_ULTRASONIC_TOOLTIP = 'Выяснить расстояние в сантиметрах от ультразвукового датчика';




Blockly.Msg.AMPERKA_MOTORSHIELD_RIGHT = 'Правый(M2)';
Blockly.Msg.AMPERKA_MOTORSHIELD_LEFT = 'Левый(M1)';
Blockly.Msg.AMPERKA_MOTORSHIELD_SET = 'Установить';
Blockly.Msg.AMPERKA_MOTORSHIELD_SPEED = 'Скорость мотора';
Blockly.Msg.AMPERKA_MOTORSHIELD_SPEED_TOOLTIP = 'Устанавливает скорость мотора (значения от 0.0 до 1.0)';
Blockly.Msg.AMPERKA_MOTORSHIELD_DIRECTION = 'Направление вращения';
Blockly.Msg.AMPERKA_MOTORSHIELD_DIRECTION_TOOLTIP =  'Устанавливает направление вращения мотора (true-истина/false-ложь)';

}
